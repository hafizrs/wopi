using System.Collections.Generic;
using System.Threading.Tasks;
using Selise.Ecap.Entities;
using Selise.Ecap.Entities.PrimaryEntities.Dms;
using Selise.Ecap.Entities.PrimaryEntities.Security;
using Selise.Ecap.Entities.PrimaryEntities.SmartCity.PraxisMonitor;
using Selise.Ecap.SC.PraxisMonitor.Contracts.Entities.LibraryModule;
using Selise.Ecap.SC.PraxisMonitor.Contracts.Models;

namespace Selise.Ecap.SC.PraxisMonitor.Contracts.DomainServices.LibraryModule
{
    public interface IObjectArtifactUtilityService
    {
        string GetLibraryViewModeKey(string type);
        string GetLibraryViewModeName(string type);
        ObjectArtifact GetObjectArtifactById(string id);
        bool IsADeletedObjectArtifact(string objectArtifactId);
        List<ObjectArtifact> GetObjectArtifacts(string[] objectArtifactIds);
        List<ObjectArtifact> GetFileObjectArtifacts(string[] objectArtifactIds);
        List<ObjectArtifact> GetFolderObjectArtifacts(string[] objectArtifactIds);
        ObjectArtifact GetObjectArtifactSecuredById(string id);
        ObjectArtifact GetEditableObjectArtifactById(string id);
        ObjectArtifact GetWritableObjectArtifactById(string id);
        List<ObjectArtifact> GetObjectArtifactNames(string[] ids);
        PraxisOrganization GetOrganizationById(string id);
        PraxisClient GetDepartmentById(string id);
        List<string> GetDepartmentIds(string organizationId);
        PraxisUser GetPraxisUserById(string id);
        List<PraxisUser> GetPraxisUsersByIds(string[] ids);
        PraxisUser GetPraxisUserByUserId(string userId);
        List<PraxisUser> GetPraxisUsersByUserIds(string[] userIds);
        List<User> GetUsersByIds(string[] ids);
        List<PraxisUser> GetPraxisUsersByOrganizationId(string id);
        List<PraxisUser> GetDepartmentWiseAssignees(string departmentId, string[] roles, string[] ids);
        bool IsAAuditSaveDepartMent(PraxisClient department);
        string GetObjectArtifactDepartmentId(IDictionary<string, MetaValuePair> metaData);
        string[] GetDepartmentDynamicRolesFromStaticRoles(string[] staticRoles, string departmentId);
        string[] GetDepartmentStaticRolesFromDynamicRoles(string[] dynamicRoles, string departmentId);
        string GetMetaDataValueByKey(IDictionary<string, MetaValuePair> metaData, string key);
        bool IsADraftedFormResponse(IDictionary<string, MetaValuePair> metaData);
        bool IsACompletedFormResponse(IDictionary<string, MetaValuePair> metaData);
        bool IsAOriginalArtifact(IDictionary<string, MetaValuePair> metaData);
        bool IsAOriginalForm(IDictionary<string, MetaValuePair> metaData);
        bool IsAForm(IDictionary<string, MetaValuePair> metaData);
        bool IsAGeneralForm(IDictionary<string, MetaValuePair> metaData);
        bool IsACompletedGeneralFormResponse(IDictionary<string, MetaValuePair> metaData);
        string GetOriginalArtifactId(IDictionary<string, MetaValuePair> metaData, bool forOriginalArtiafact = false);
        string GetFormType(IDictionary<string, MetaValuePair> metaData);
        List<string> GetPreviousApproverIdsByInterval(ObjectArtifact artifact, RiqsObjectArtifactMapping mappingData = null);
        bool IsADocument(IDictionary<string, MetaValuePair> metaData, bool isDraft);
        bool IsADocument(IDictionary<string, MetaValuePair> metaData);
        bool IsADrraftedDocument(IDictionary<string, MetaValuePair> metaData);
        bool IsADraftedArtifact(IDictionary<string, MetaValuePair> metaData);
        List<PraxisUser> GetPraxisUsersByIdsOrRoles(string[] includingIds, string[] roles = null, string[] excludingIds = null, bool isExcludeAdminB = true, List<PraxisUser> praxisUsers = null, bool hideGroupAdmin = true);
        List<RiqsActivitySummaryModel> GetFormCompletionSummary(string objectArtifactId, List<RiqsObjectArtifactMapping> artifactMappingDatas = null);
        List<ObjectArtifact> GetOrganizationObjectArtifacts(string organizationId);
        RiqsLibraryControlMechanism GetOrganizationLibraryControlMechanism(string organizationId);
        RiqsLibraryControlMechanism GetOrganizationLibraryControlMechanismForDept(string departmentId);
        bool IsADeletedArtifact(ObjectArtifact artifact);
        bool CanReadObjectArtifact(ObjectArtifact artifact);
        string GetFileTypeName(IDictionary<string, MetaValuePair> metaData);
        Task SetObjectArtifactExtension(ObjectArtifact artifact);
        Task SetMetaDataProperties(string artifactId);
        bool IsASecretArtifact(IDictionary<string, MetaValuePair> metaData);
        List<ObjectArifactApproverInfo> GetObjectArtifactApproverInfos(string objectArtifactId);
        RiqsObjectArtifactMapping GetRiqsObjectArtifactMappingByArtifactId(string objectArtifactId);
        bool IsAApprovedObjectArtifact(IDictionary<string, MetaValuePair> metaData);
        List<PraxisUser> GetOrganizationAdminBPraxisUsers(string organizationId);
        List<ObjectArtifact> GetFilteredFileObjectArtifacts(List<ObjectArtifact> objectArtifacts);
        List<ObjectArtifact> GetFilteredFolderObjectArtifacts(List<ObjectArtifact> objectArtifacts);
        List<ObjectArtifact> GetFilteredFormObjectArtifacts(List<ObjectArtifact> fileObjectArtifacts);
        List<ObjectArtifact> GetFilteredDocumentObjectArtifacts(List<ObjectArtifact> fileObjectArtifacts);
        List<ObjectArtifact> GetFilteredDraftAvailableDocumentObjectArtifacts(List<ObjectArtifact> documentObjectArtifacts);
        bool IsExistDocumentDraft(string documentObjectArtifactId);
        DocumentEditMappingRecord GetDocumentDraftMappingData(string documentObjectArtifactId);
        bool IsDocumentDraftedByOtherUser(DocumentEditMappingRecord draftedDocumentMappingData, string userId);
        bool IsAPendingSignatureFormResponse(IDictionary<string, MetaValuePair> metaData);
        DocumentEditMappingRecord GetDocumentNotDraftedEditMappingData(string documentObjectArtifactId);
        bool IsDocumentEditedByOtherUser(DocumentEditMappingRecord draftedDocumentMappingData, string userId);
        Task CreateDocumentEditMappingRecordForExternalFiles(string objectArtifactId);
        Task CreateDocumentMarkedAsReadEntry(ObjectArtifact artifact);
        bool IsASavedDraftedChildDocument(IDictionary<string, MetaValuePair> metadata);
        Task<List<DocumentsMarkedAsRead>> GetDocumentsMarkAsReadByArtifactId(string artifactId);
        string GetObjectArtifactDepartmentIdForSubscription(IDictionary<string, MetaValuePair> metaData);
        List<ObjectArtifact> GetObjectArtifactsByParentId(string parentId);
        bool IsAInterfaceMigrationArtifact(IDictionary<string, MetaValuePair> metadata);
        bool IsAOrgLevelArtifact(IDictionary<string, MetaValuePair> metaData, ArtifactTypeEnum artifactType);
        bool IsNotifiedToCockpit(IDictionary<string, MetaValuePair> metaData);
    }
}
